import datetime as dt
from datetime import datetime, timedelta, date
import telegram
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import io
import pandas as pd
import pandahouse as ph
from io import StringIO
import os
from airflow.decorators import dag, task
from airflow.operators.python import get_current_context


#–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Clickhouse
connection = {
    'host': 'https://clickhouse.lab.karpov.courses',
    'database': 'simulator_20230820',
    'user': 'student',
    'password': 'dpo_python_2020'
}

# –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–∫–∏–¥—ã–≤–∞—é—Ç—Å—è –≤ —Ç–∞—Å–∫–∏
default_args = {
    'owner': 'ayurina',
    'depends_on_past': False,
    'retries': 1,
    'retry_delay': timedelta(minutes=5),
    'start_date': datetime(2023, 9, 15),
}

# –ò–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞–ø—É—Å–∫–∞ DAG
schedule_interval = '0 11 * * *'

#—ç–º–æ–¥–∑–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
up = "üìà"
down = "üìâ"
equal = "‚ÜîÔ∏è"

# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è DAG'–∞    
@dag(default_args=default_args, schedule_interval=schedule_interval, catchup=False)
def dag_ayurina_full_report():
    # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    @task()
    def extract_feed_action():
        # SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö 
        query_feed = f"""
            SELECT 
                toDate(time) as Date,
                count(distinct user_id) AS DAU,
                countIf(action = 'view') AS views,
                countIf(action = 'like') AS likes,
                countIf(action = 'like') / countIf(action = 'view') AS CTR
            FROM 
                simulator_20230820.feed_actions 
            WHERE 
                toDate(time) >= today() - 14 and toDate(time) < today()
            GROUP BY Date
            order by Date
            """
        df_feed = ph.read_clickhouse(query_feed, connection=connection)
        return df_feed
    
    @task()
    def extract_feed_chart():
        # SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ —Ä–∞–∑—Ä–µ–∑–∞–º
        query_chart = """
            SELECT
                toDate(time) AS Date,
                count(user_id) as users,
                countIf(os = 'Android') AS Android,
                countIf(os = 'iOS') AS iOS,
                countIf(source = 'organic') AS organic,
                countIf(source = 'ads') AS ads
            FROM
                simulator_20230820.feed_actions
            WHERE
                toDate(time) BETWEEN today() - 14 AND yesterday()
            GROUP BY Date
            ORDER BY Date
        """
        df_chart = ph.read_clickhouse(query_chart, connection=connection)
        return df_chart
    
    @task()
    def extract_message():
        # SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ (–º–µ—Ç—Ä–∏–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
        query_mes = f"""
            SELECT 
                toDate(time) as Date,
                count (distinct user_id) AS DAU,
                count(user_id) AS messages
            FROM 
                simulator_20230820.message_actions 
            WHERE 
                toDate(time) >= today() - 14 and toDate(time) < today()
            GROUP BY Date
            order by Date
            """
        df_messages = ph.read_clickhouse(query_mes, connection=connection)
        return df_messages
    
    @task()
    def transform_data(df):
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if 'DAU' in df.columns:
            df['DAU'] = df['DAU'] / 1000  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ DAU –≤ —Ç—ã—Å—è—á–∏
        if 'likes' in df.columns:
            df['likes'] = df['likes'] / 1000  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ likes –≤ —Ç—ã—Å—è—á–∏
        if 'views' in df.columns:
            df['views'] = df['views'] / 1000  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ views –≤ —Ç—ã—Å—è—á–∏
        if 'likes' in df.columns and 'views' in df.columns:
            df['CTR'] = df['likes'] / df['views']  # –†–∞—Å—Å—á–µ—Ç CTR
        if 'messages' in df.columns:
            df['messages'] = df['messages'] / 1000  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ likes –≤ —Ç—ã—Å—è—á–∏
        return df
    
    @task()
    def transform_text(df_feed, df_messages):
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –∑–∞ –≤—á–µ—Ä–∞
        yesterday = datetime.today() - timedelta(days=1)
        yesterday_str = yesterday.strftime('%d-%m-%Y')
        # –†–∞—Å—Å—á–∏—Ç–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –≤—Ä–µ–º–µ–Ω–∏
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—á–µ—Ä–∞
        yesterday_feed = df_feed.iloc[-1]
        yesterday_messages = df_messages.iloc[-1]
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ–∑–∞–≤—á–µ—Ä–∞
        revious_day_feed = df_feed.iloc[-2]
        revious_day_messages = df_messages.iloc[-2]
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –¥–µ–Ω—å –Ω–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥
        week_ago_feed = df_feed.iloc[-8]
        week_ago_messages = df_messages.iloc[-8]
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ 1 –∏ 2 –Ω–µ–¥–µ–ª–∏ –Ω–∞–∑–∞–¥
        last_week_feed = df_feed.iloc[-7:]
        last_two_weeks_feed = df_feed.iloc[-14:]
        last_week_messages = df_messages.iloc[-7:]
        last_two_weeks_messages = df_messages.iloc[-14:]
        # –†–∞—Å—Å—á–µ—Ç –¥–∏–Ω–∞–º–∏–∫–∏ –∑–∞ –¥–µ–Ω—å –∏ –Ω–µ–¥–µ–ª—é
        def calculate_change(current, previous):
            return ((current - previous) / previous) * 100
        DAU_change_feed_day = calculate_change(yesterday_feed['DAU'], revious_day_feed['DAU'])
        views_change_feed_day = calculate_change(yesterday_feed['views'], revious_day_feed['views'])
        likes_change_feed_day = calculate_change(yesterday_feed['likes'], revious_day_feed['likes'])
        CTR_change_feed_day = calculate_change(yesterday_feed['CTR'], revious_day_feed['CTR'])

        DAU_change_feed_week = calculate_change(yesterday_feed['DAU'], week_ago_feed['DAU'])
        views_change_feed_week = calculate_change(yesterday_feed['views'], week_ago_feed['views'])
        likes_change_feed_week = calculate_change(yesterday_feed['likes'], week_ago_feed['likes'])
        CTR_change_feed_week = calculate_change(yesterday_feed['CTR'], week_ago_feed['CTR'])

        DAU_change_messages_day = calculate_change(yesterday_messages['DAU'], revious_day_messages['DAU'])
        DAU_change_messages_week = calculate_change(yesterday_messages['DAU'], week_ago_messages['DAU'])
        messages_change_messages_day = calculate_change(yesterday_messages['messages'], revious_day_messages['messages'])
        messages_change_messages_week = calculate_change(yesterday_messages['messages'], week_ago_messages['messages'])
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report = f" üìë –û—Ç—á–µ—Ç –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º –Ω–∞ {yesterday_str}:\n"
        report += "===========================\n"
        report += "–ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –õ–µ–Ω—Ç—ã –Ω–æ–≤–æ—Å—Ç–µ–π:\n"
        report += "___________________________\n"
        report += f"DAU –∑–∞ –≤—á–µ—Ä–∞: {yesterday_feed['DAU']*1000}\n"
        report += f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ DAU –¥/–¥: {DAU_change_feed_day:.2f}% {down if DAU_change_feed_day < 0 else up if DAU_change_feed_day > 0 else equal}\n"
        report += f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ DAU –Ω/–Ω: {DAU_change_feed_week:.2f}% {down if DAU_change_feed_week < 0 else up if DAU_change_feed_week > 0 else equal}\n"
        report += f"–°—Ä. –∑–Ω–∞—á. DAU –∑–∞ –Ω–µ–¥–µ–ª—é: {round(last_week_feed['DAU'].mean()*1000,0)}\n"
        report += f"–°—Ä. –∑–Ω–∞—á. DAU –∑–∞ 2 –Ω–µ–¥–µ–ª–∏: {round(last_two_weeks_feed['DAU'].mean()*1000,0)}\n"
        report += "___________________________\n"
        report += f"–ü—Ä–æ—Å–º–æ—Ç—Ä—ã –∑–∞ –≤—á–µ—Ä–∞: {round(yesterday_feed['views']*1000,0)}\n"
        report += f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –¥/–¥: {views_change_feed_day:.2f}% {down if views_change_feed_day < 0 else up if views_change_feed_day > 0 else equal}\n"
        report += f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω/–Ω: {views_change_feed_week:.2f}% {down if views_change_feed_week < 0 else up if views_change_feed_week > 0 else equal}\n"
        report += f"–°—Ä. –∑–Ω–∞—á. –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: {round(last_week_feed['views'].mean()*1000,0)}\n"
        report += f"–°—Ä. –∑–Ω–∞—á. –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∑–∞ 2 –Ω–µ–¥–µ–ª–∏: {round(last_two_weeks_feed['views'].mean()*1000,0)}\n"
        report += "___________________________\n"
        report += f"–õ–∞–π–∫–∏ –∑–∞ –≤—á–µ—Ä–∞: {round(yesterday_feed['likes']*1000,0)}\n"
        report += f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–∞–π–∫–æ–≤ –¥/–¥: {likes_change_feed_day:.2f}% {down if likes_change_feed_day < 0 else up if likes_change_feed_day > 0 else equal}\n"
        report += f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–∞–π–∫–æ–≤ –Ω/–Ω: {likes_change_feed_week:.2f}% {down if likes_change_feed_week < 0 else up if likes_change_feed_week > 0 else equal}\n"
        report += f"–°—Ä. –∑–Ω–∞—á. –ª–∞–π–∫–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: {round(last_week_feed['likes'].mean()*1000,0)}\n"
        report += f"–°—Ä. –∑–Ω–∞—á. –ª–∞–π–∫–æ–≤ –∑–∞ 2 –Ω–µ–¥–µ–ª–∏: {round(last_two_weeks_feed['likes'].mean()*1000,0)}\n"
        report += "___________________________\n"
        report += f"CTR –∑–∞ –≤—á–µ—Ä–∞: {yesterday_feed['CTR']:.3f}\n"
        report += f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ CTR –¥/–¥: {CTR_change_feed_day:.2f}% {down if CTR_change_feed_day < 0 else up if CTR_change_feed_day > 0 else equal}\n"
        report += f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ CTR –Ω/–Ω: {CTR_change_feed_week:.2f}% {down if CTR_change_feed_week < 0 else up if CTR_change_feed_week > 0 else equal}\n"
        report += f"–°—Ä. –∑–Ω–∞—á. CTR –∑–∞ –Ω–µ–¥–µ–ª—é: {round(last_week_feed['CTR'].mean(),3)}\n"
        report += f"–°—Ä. –∑–Ω–∞—á. CTR –∑–∞ 2 –Ω–µ–¥–µ–ª–∏: {round(last_two_weeks_feed['CTR'].mean(),3)}\n"
        report += "===========================\n\n"
        report += "–ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞:\n"
        report += "___________________________\n"
        report += f"DAU –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ –∑–∞ –≤—á–µ—Ä–∞: {round(yesterday_messages['DAU']*1000,0)}\n"
        report += f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ DAU –¥/–¥: {DAU_change_messages_day:.2f}% {down if DAU_change_messages_day < 0 else up if DAU_change_messages_day > 0 else equal}\n"
        report += f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ DAU –Ω/–Ω: {DAU_change_messages_week:.2f}% {down if DAU_change_messages_week < 0 else up if DAU_change_messages_week > 0 else equal}\n"
        report += f"–°—Ä. –∑–Ω–∞—á. DAU –∑–∞ –Ω–µ–¥–µ–ª—é: {round(last_week_messages['DAU'].mean()*1000,0)}\n"
        report += f"–°—Ä. –∑–Ω–∞—á. DAU –∑–∞ 2 –Ω–µ–¥–µ–ª–∏: {round(last_two_weeks_messages['DAU'].mean()*1000,0)}\n"
        report += "___________________________\n"
        report += f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –≤—á–µ—Ä–∞: {round(yesterday_messages['messages']*1000,0)}\n"
        report += f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥/–¥: {messages_change_messages_day:.2f}% {down if messages_change_messages_day < 0 else up if messages_change_messages_day > 0 else equal}\n"
        report += f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω/–Ω: {messages_change_messages_week:.2f}% {down if messages_change_messages_week < 0 else up if messages_change_messages_week > 0 else equal}\n"
        report += f"–°—Ä. –∑–Ω–∞—á. –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é: {round(last_week_messages['messages'].mean()*1000,0)}\n"
        report += f"–°—Ä. –∑–Ω–∞—á. –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ 2 –Ω–µ–¥–µ–ª–∏: {round(last_two_weeks_messages['messages'].mean()*1000,0)}\n"
        report += "===========================\n"
        return report
    
    @task()
    def transform_chart(df_chart, df_feed, df_messages):
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∏–ª—è –∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∏–≥—É—Ä—ã
        sns.set(rc={'figure.figsize': (24, 12)})
        plt.style.use("bmh")
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É –≥—Ä–∞—Ñ–∏–∫–æ–≤
        fig, axes = plt.subplots(nrows=3, ncols=2)
        # –ì—Ä–∞—Ñ–∏–∫ DAU –≤ –ª–µ–Ω—Ç–µ –Ω–æ–≤–æ—Å—Ç–µ–π
        sns.lineplot(data=df_feed, x='Date', y='DAU', ax=axes[0, 0], linewidth=2, linestyle='-')
        axes[0, 0].set_title('–ì—Ä–∞—Ñ–∏–∫ DAU –≤ –ª–µ–Ω—Ç–µ –Ω–æ–≤–æ—Å—Ç–µ–π')
        # –ì—Ä–∞—Ñ–∏–∫ DAU –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ
        sns.lineplot(data=df_messages, x='Date', y='DAU', ax=axes[0, 1], linewidth=2, linestyle='-')
        axes[0, 1].set_title('–ì—Ä–∞—Ñ–∏–∫ DAU –≤ –ª–µ–Ω—Ç–µ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞')
        # –ì—Ä–∞—Ñ–∏–∫ CTR
        sns.lineplot(data=df_feed, x='Date', y='CTR', ax=axes[1, 0], linewidth=2, linestyle='-')
        axes[1, 0].set_title('–ì—Ä–∞—Ñ–∏–∫ CTR')
        # –ì—Ä–∞—Ñ–∏–∫ –ö–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        sns.lineplot(data=df_messages, x='Date', y='messages', ax=axes[1, 1], linewidth=2, linestyle='-')
        axes[1, 1].set_title('–ì—Ä–∞—Ñ–∏–∫ –ö–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π')
        # –ì—Ä–∞—Ñ–∏–∫ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –û–°
        sns.lineplot(data=df_chart, x='Date', y='Android', ax=axes[2, 0], label='Android', linewidth=2, linestyle='-')
        sns.lineplot(data=df_chart, x='Date', y='iOS', ax=axes[2, 0], label='iOS', linewidth=2, linestyle='-')
        axes[2, 0].set_title('–ì—Ä–∞—Ñ–∏–∫ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –û–°')
        # –ì—Ä–∞—Ñ–∏–∫ –ü—Ä–∏–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞
        sns.lineplot(data=df_chart, x='Date', y='organic', ax=axes[2, 1], label='Organic', linewidth=2, linestyle='-')
        sns.lineplot(data=df_chart, x='Date', y='ads', ax=axes[2, 1], label='Ads', linewidth=2, linestyle='-')
        axes[2, 1].set_title('–ì—Ä–∞—Ñ–∏–∫ –ü—Ä–∏–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞')
        # –û–±—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Å–µ—Ç–∫–∏
        plt.suptitle('–î–∏–Ω–∞–º–∏–∫–∞ –º–µ—Ç—Ä–∏–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π', fontsize=20, fontweight='bold')
        plt.tight_layout()  # –î–ª—è –∏–∑–±–µ–≥–∞–Ω–∏—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è –º–µ—Ç–æ–∫
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        plot_object = io.BytesIO()
        plt.savefig(plot_object)
        plot_object.seek(0)
        plot_object.name = 'full_chart.png'
        plt.close()
        return plot_object
    
    @task()
    def load(report, plot_object):
        chat_id = "—Å–∫—Ä—ã—Ç"
        bot = telegram.Bot(token="bot_id —Å–∫—Ä—ã—Ç")

        bot.sendMessage(chat_id=chat_id, text=report, parse_mode='Markdown')
        bot.sendPhoto(chat_id=chat_id, photo=plot_object)

    df_feed = extract_feed_action()
    df_messages = extract_message()
    df_chart = extract_feed_chart()
    df_feed = transform_data(df_feed)  # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π –∫ –¥–∞–Ω–Ω—ã–º –õ–µ–Ω—Ç—ã –Ω–æ–≤–æ—Å—Ç–µ–π
    df_messages = transform_data(df_messages)  # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π –∫ –¥–∞–Ω–Ω—ã–º –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞
    report = transform_text(df_feed, df_messages)
    plot_object = transform_chart(df_chart, df_feed, df_messages)
    load(report, plot_object)

dag_ayurina_full_report = dag_ayurina_full_report()
